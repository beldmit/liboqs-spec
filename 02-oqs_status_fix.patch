diff --git a/src/kem/frodokem/external/kem.c b/src/kem/frodokem/external/kem.c
index 423218b71..0cbbeb79a 100644
--- a/src/kem/frodokem/external/kem.c
+++ b/src/kem/frodokem/external/kem.c
@@ -6,7 +6,7 @@
 
 #include <string.h>
 
-int crypto_kem_keypair(unsigned char* pk, unsigned char* sk)
+OQS_STATUS crypto_kem_keypair(unsigned char* pk, unsigned char* sk)
 { // FrodoKEM's key generation
   // Outputs: public key pk (               BYTES_SEED_A + (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8 bytes)
   //          secret key sk (CRYPTO_BYTES + BYTES_SEED_A + (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8 + 2*PARAMS_N*PARAMS_NBAR + BYTES_PKHASH bytes)
@@ -59,11 +59,11 @@ int crypto_kem_keypair(unsigned char* pk, unsigned char* sk)
     clear_bytes((uint8_t *)E, PARAMS_N*PARAMS_NBAR*sizeof(uint16_t));
     clear_bytes(randomness, 2*CRYPTO_BYTES);
     clear_bytes(shake_input_seedSE, 1 + CRYPTO_BYTES);
-    return 0;
+    return OQS_SUCCESS;
 }
 
 
-int crypto_kem_enc(unsigned char *ct, unsigned char *ss, const unsigned char *pk)
+OQS_STATUS crypto_kem_enc(unsigned char *ct, unsigned char *ss, const unsigned char *pk)
 { // FrodoKEM's key encapsulation
     const uint8_t *pk_seedA = &pk[0];
     const uint8_t *pk_b = &pk[BYTES_SEED_A];
@@ -128,11 +128,11 @@ int crypto_kem_enc(unsigned char *ct, unsigned char *ss, const unsigned char *pk
     clear_bytes(G2out, 2*CRYPTO_BYTES);
     clear_bytes(Fin_k, CRYPTO_BYTES);
     clear_bytes(shake_input_seedSE, 1 + CRYPTO_BYTES);
-    return 0;
+    return OQS_SUCCESS;
 }
 
 
-int crypto_kem_dec(unsigned char *ss, const unsigned char *ct, const unsigned char *sk)
+OQS_STATUS crypto_kem_dec(unsigned char *ss, const unsigned char *ct, const unsigned char *sk)
 { // FrodoKEM's key decapsulation
     uint16_t B[PARAMS_N*PARAMS_NBAR] = {0};
     uint16_t Bp[PARAMS_N*PARAMS_NBAR] = {0};
@@ -223,5 +223,5 @@ int crypto_kem_dec(unsigned char *ss, const unsigned char *ct, const unsigned ch
     clear_bytes(G2out, 2*CRYPTO_BYTES);
     clear_bytes(Fin_k, CRYPTO_BYTES);
     clear_bytes(shake_input_seedSEprime, 1 + CRYPTO_BYTES);
-    return 0;
+    return OQS_SUCCESS;
 }
